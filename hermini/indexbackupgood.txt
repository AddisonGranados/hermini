<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Her MINI – Webapp</title>
  <style>
    :root {
      --bg: #12010e;
      --panel: #1f0a1a;
      --text: #ffe8f4;
      --muted: #f0a2c4;
      --accent: #ff5cab;   /* pink */
      --danger: #ff4d6d;   /* rose */
      --grid-border: #ff9cc8; /* soft pink silhouette */
    }
    * { box-sizing: border-box; }
    html, body { height: 100%; }
    body { margin: 0; font-family: ui-sans-serif, system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial; color: var(--text); background: linear-gradient(180deg, #150313, #1a0716 35%, #12010e 100%); }

    .wrap { max-width: 1100px; margin: 24px auto; padding: 0 16px; }
    .topbar { display:flex; align-items:center; gap:12px; margin-bottom: 16px; }
    .title { font-size: 20px; font-weight: 700; letter-spacing: 0.2px; }
    .spacer { flex:1; }

    button, .toggle { background: var(--panel); color: var(--text); border: 1px solid #23252b; padding: 8px 10px; border-radius: 12px; font-weight: 600; cursor: pointer; }
    .toggle { display:flex; align-items:center; gap:8px; user-select:none; }
    .toggle input { appearance: none; width: 34px; height: 20px; background:#242731; border-radius: 999px; position: relative; outline: none; border: 1px solid #2f3340; }
    .toggle input:after { content:""; position:absolute; width: 14px; height: 14px; border-radius: 50%; background:#7a8599; top: 2px; left: 2px; transition: all .15s ease; }
    .toggle input:checked { background:#4c1638; border-color:#7d2154; }
    .toggle input:checked:after { background:var(--accent); left: 18px; }

    .layout { display:grid; grid-template-columns: 520px 1fr; gap: 18px; align-items: start; }
    .panel { background: rgba(31,10,26,.85); border:1px solid #402036; border-radius: 16px; padding: 14px; }

    /* Grid */
    .grid { width: 100%; display: grid; border-radius: 10px; overflow: clip; user-select: none; background:#1a0a15; outline: none; }
    .cell { position: relative; display:flex; align-items:center; justify-content:center; font-weight: 700; font-size: 28px; background:#1d0c18; }
    .cell.block { background: #0f0610; }
    .cell .letter { transform: translateY(1px); }
    .cell.sel { outline: 2px solid var(--accent); outline-offset: -2px; }
    .cell.wrong { box-shadow: inset 0 0 0 3px var(--danger); }

    /* Morphing silhouette border */
    .cell.edge-t { border-top: 2px solid var(--grid-border); }
    .cell.edge-b { border-bottom: 2px solid var(--grid-border); }
    .cell.edge-l { border-left: 2px solid var(--grid-border); }
    .cell.edge-r { border-right: 2px solid var(--grid-border); }

    /* Tiny clue numbers and highlights */
    .cell .num{position:absolute;top:2px;left:3px;font-size:10px;font-weight:700;color:var(--muted);opacity:.9;pointer-events:none}
    .cell.active{background:#ff5cab30}
    .cluegroup h3 { margin: 0 0 8px; font-size: 14px; color: var(--muted); text-transform: uppercase; letter-spacing: .12em; }
    .cluelist { display:flex; flex-direction: column; gap: 6px; max-height: 240px; overflow:auto; padding-right:6px; }
    .clue { font-size: 13px; color:#ffd4e7; padding:6px 8px; border-radius:8px; border:1px solid #402036; background:#1a0a15; }
    .clue.active{background:#2a0f21;border-color:var(--accent);color:var(--text)}

    .controls { display:flex; flex-wrap: wrap; gap:8px; margin-top:12px; }
    .hint { color: var(--muted); font-size: 12px; margin-top: 8px; }

    input[type="file"] { display:none; }
    label.filebtn { display:inline-flex; align-items:center; gap:8px; background: var(--panel); border:1px solid #402036; padding: 8px 10px; border-radius: 12px; font-weight: 700; cursor:pointer; }

    /* Login overlay */
    #loginOverlay { position:fixed; inset:0; background:rgba(0,0,0,.8); display:flex; align-items:center; justify-content:center; z-index:9999; }
    #loginBox { background:var(--panel); padding:20px; border-radius:16px; border:1px solid #402036; display:flex; flex-direction:column; gap:12px; align-items:center; }
    #loginBox input { padding:8px 10px; border-radius:8px; border:1px solid #402036; background:#1a0a15; color:var(--text); }
  .greet{font-weight:700; color:var(--muted); padding:6px 10px; border:1px solid #402036; border-radius:12px; background:#1a0a15}
    /* Login modal */
    .modal{position:fixed; inset:0; display:none; align-items:center; justify-content:center; background:rgba(0,0,0,.4); backdrop-filter: blur(2px); z-index:50}
    .modal.show{display:flex}
    .card{width:min(420px,92vw); background:#1f0a1a; border:1px solid #402036; border-radius:16px; padding:18px; box-shadow:0 10px 30px rgba(0,0,0,.35)}
    .card h2{margin:0 0 8px; font-size:18px; color:#ffd4e7}
    .card p{margin:0 0 10px; color:var(--muted); font-size:13px}
    .row{display:flex; gap:8px}
    .row input{flex:1; padding:10px 12px; border-radius:12px; border:1px solid #402036; background:#12010e; color:var(--text); font-weight:700}
    .row button{padding:10px 14px; border-radius:12px; border:1px solid #402036; background:var(--accent); color:#180712; font-weight:800; cursor:pointer}
  </style>
</head>
<body>
  <div id="loginOverlay">
    <div id="loginBox">
      <h2>Welcome to Her MINI</h2>
      <input id="usernameInput" type="text" placeholder="Enter your name" />
      <button id="loginBtn">Login</button>
    </div>
  </div>

  <div class="wrap" style="display:none" id="appWrap">
    <div class="topbar">
      <div class="title" id="title">Her MINI</div>
      <div class="spacer"></div>
      <span id="greet" class="greet" aria-live="polite"></span>
      <div id="timer" style="font-weight:700; letter-spacing:.5px; padding:6px 10px; border:1px solid #402036; border-radius:12px; background:#1a0a15; min-width:72px; text-align:center;">00:00</div>
      <label class="filebtn" for="file">Open JSON</label>
      <input id="file" type="file" accept="application/json" />
      <label class="toggle"><input id="autocheck" type="checkbox" checked><span>Autocheck</span></label>
    </div>

    <div class="layout">
      <div class="panel">
        <div id="grid" class="grid" tabindex="0" aria-label="Crossword grid"></div>
        <div class="hint">Keys: arrows move · <b>Tab</b> switches Across/Down · <b>⌫</b> delete · type letters</div>
      </div>

      <div class="panel">
        <div class="clues">
          <div class="cluegroup">
            <h3>Across</h3>
            <div id="across" class="cluelist"></div>
          </div>
          <div class="cluegroup">
            <h3>Down</h3>
            <div id="down" class="cluelist"></div>
          </div>
          <div class="controls">
            <button id="toggleDir">Toggle Dir (↔︎)</button>
            <button id="checkSquare">Check Square</button>
            <button id="checkWord">Check Word</button>
            <button id="revealSquare">Reveal ☐</button>
            <button id="revealWord">Reveal Word</button>
            <button id="revealAll">Reveal All</button>
          </div>
        </div>
  </div>

  <!-- Login Modal -->
  <div id="loginModal" class="modal" role="dialog" aria-modal="true" aria-labelledby="loginTitle">
    <div class="card">
      <h2 id="loginTitle">Welcome to Her MINI</h2>
      <p>Enter your name to personalize your puzzles.</p>
      <div class="row">
        <input id="nameInput" type="text" placeholder="Your name" maxlength="24" />
        <button id="startBtn" type="button">Start</button>
      </div>
    </div>
  </div>

  <script>
    // ----- Login -----
    let profile = null;
    document.getElementById('loginBtn').addEventListener('click', ()=>{
      const name=document.getElementById('usernameInput').value.trim();
      if(!name){ alert('Enter a name'); return; }
      profile={ name };
      localStorage.setItem('hermini-profile', JSON.stringify(profile));
      document.getElementById('loginOverlay').style.display='none';
      document.getElementById('appWrap').style.display='block';
    });

    // Auto-login if saved
    window.addEventListener('DOMContentLoaded', ()=>{
      const saved=localStorage.getItem('hermini-profile');
      if(saved){ try{ profile=JSON.parse(saved); document.getElementById('loginOverlay').style.display='none'; document.getElementById('appWrap').style.display='block'; }catch{} }
    });

    // ----- State -----
    let state = {
      title: 'Her MINI',
      dir: 'across',
      sel: { r:0, c:0 },
      rows: 0,
      cols: 0,
      grid: [],
      blocks: [],
      solution: [],
      clues: { across: [], down: [] },
      autocheck: true,
      numbers: [],
      acrossMap: [],
      downMap: []
    };

    let timerStart = null; let timerInterval = null; let solved = false;

    const gridEl = document.getElementById('grid');
    const greetEl = document.getElementById('greet');
    const loginModal = document.getElementById('loginModal');
    const nameInput = document.getElementById('nameInput');
    const startBtn = document.getElementById('startBtn');
    
    const acrossEl = document.getElementById('across');
    const downEl = document.getElementById('down');

    document.getElementById('autocheck').addEventListener('change', e => { state.autocheck = e.target.checked; renderGrid(); });

    // ----- Profile (lightweight login) -----
    const PROFILE_KEY = 'hermini-profile-name';
    function getProfileName(){ return localStorage.getItem(PROFILE_KEY); }
    function setProfileName(name){ if(name && name.trim()){ localStorage.setItem(PROFILE_KEY, name.trim()); updateGreeting(); hideLogin(); } }
    function updateGreeting(){ const n = getProfileName(); if(greetEl) greetEl.textContent = n ? `Hi, ${n}` : ''; }
    function showLogin(){ if(loginModal){ loginModal.classList.add('show'); setTimeout(()=> nameInput && nameInput.focus(), 0); } }
    function hideLogin(){ if(loginModal){ loginModal.classList.remove('show'); } }
    if(startBtn){ startBtn.addEventListener('click', ()=> setProfileName(nameInput.value)); }
    if(nameInput){ nameInput.addEventListener('keydown', (e)=>{ if(e.key==='Enter') setProfileName(nameInput.value); }); }
    (function initProfile(){ updateGreeting(); if(!getProfileName()) showLogin(); })();

    function setSize(r, c){ state.rows=r; state.cols=c; gridEl.style.aspectRatio = `${c}/${r}`; gridEl.style.gridTemplateColumns = `repeat(${c}, 1fr)`; }

    // ----- Load puzzle -----
    function loadPuzzle(obj){
      if (!obj || !obj.solution) { alert('Invalid puzzle JSON'); return; }
      const r1 = obj.solution.length; const c1 = (obj.solution[0]||'').length;
      if (!r1 || !c1) { alert('Empty solution matrix'); return; }
      if (obj.solution.some(row => row.length !== c1)) { alert('All solution rows must be same length'); return; }

      setSize(r1,c1);
      state.title = obj.title || 'Her MINI'; document.getElementById('title').textContent = state.title;
      state.clues = obj.clues || { across: [], down: [] };

      state.blocks = Array.from({length:r1},(_,r)=>Array.from({length:c1},(_,c)=> obj.solution[r][c] === '#'));
      state.solution = Array.from({length:r1},(_,r)=>Array.from({length:c1},(_,c)=> { const ch = obj.solution[r][c]; return ch === '#' ? '#' : String(ch).toUpperCase(); }));

      state.grid = Array.from({length:r1},()=>Array(c1).fill(null));
      computeNumbers();

      outer: for (let r=0;r<r1;r++) for(let c=0;c<c1;c++) if(!state.blocks[r][c]){ state.sel={r,c}; break outer; }

      solved=false; startTimer();
      renderAll(); gridEl.focus();
    }

    function computeNumbers(){
      const R=state.rows,C=state.cols; state.numbers=Array.from({length:R},()=>Array(C).fill(null));
      state.acrossMap=[]; state.downMap=[]; let n=1;
      for(let r=0;r<R;r++){
        for(let c=0;c<C;c++){
          if(state.blocks[r][c]) continue;
          const startsAcross = (c===0 || state.blocks[r][c-1]) && (c+1<C && !state.blocks[r][c+1]);
          const startsDown   = (r===0 || state.blocks[r-1][c]) && (r+1<R && !state.blocks[r+1][c]);
          if(startsAcross || startsDown){ state.numbers[r][c]=n; }
          if(startsAcross){ const cells=[]; let cc=c; while(cc<C && !state.blocks[r][cc]){ cells.push([r,cc]); cc++; } state.acrossMap.push({number:n, cells}); }
          if(startsDown){ const cells=[]; let rr=r; while(rr<R && !state.blocks[rr][c]){ cells.push([rr,c]); rr++; } state.downMap.push({number:n, cells}); }
          if(startsAcross || startsDown) n++;
        }
      }
    }

    function currentWordIndex(){
      const aw = activeWordCells(); if(aw.length===0) return null; const [r0,c0]=aw[0];
      if(state.dir==='across'){
        for(let i=0;i<state.acrossMap.length;i++){ const cells=state.acrossMap[i].cells; if(cells.length && cells[0][0]===r0 && cells[0][1]===c0) return {type:'across', idx:i}; }
      } else {
        for(let i=0;i<state.downMap.length;i++){ const cells=state.downMap[i].cells; if(cells.length && cells[0][0]===r0 && cells[0][1]===c0) return {type:'down', idx:i}; }
      }
      return null;
    }

    function renderAll(){ renderGrid(); renderClues(); }

    function renderGrid(){
      gridEl.innerHTML=''; const R=state.rows,C=state.cols; const active=new Set(activeWordCells().map(([r,c])=> r+','+c));
      for(let r=0;r<R;r++){
        for(let c=0;c<C;c++){
          const isBlock=state.blocks[r][c]; const div=document.createElement('div'); div.className='cell'+(isBlock?' block':'');
          if(!isBlock){
            if(r===0||state.blocks[r-1][c]) div.classList.add('edge-t');
            if(r===R-1||state.blocks[r+1][c]) div.classList.add('edge-b');
            if(c===0||state.blocks[r][c-1]) div.classList.add('edge-l');
            if(c===C-1||state.blocks[r][c+1]) div.classList.add('edge-r');
            const num=state.numbers[r][c]; if(num){ const n=document.createElement('div'); n.className='num'; n.textContent=num; div.appendChild(n); }
            const span=document.createElement('span'); span.className='letter'; span.textContent=state.grid[r][c]||''; div.appendChild(span);
            if(active.has(r+','+c)) div.classList.add('active');
            if(r===state.sel.r && c===state.sel.c) div.classList.add('sel');
            if(state.autocheck){ const e=state.grid[r][c]; const s=state.solution[r][c]; if(e && e!==s) div.classList.add('wrong'); }
            div.addEventListener('click',()=>{ selectCell(r,c); });
          }
          gridEl.appendChild(div);
        }
      }
    }

    function renderClues(){
      acrossEl.innerHTML='';
      state.acrossMap.forEach((entry,i)=>{
        const d=document.createElement('div'); d.className='clue'; d.textContent=`${entry.number}. ${state.clues.across[i]||''}`; if(currentWordIndex()?.type==='across' && currentWordIndex().idx===i) d.classList.add('active'); acrossEl.appendChild(d);
      });
      downEl.innerHTML='';
      state.downMap.forEach((entry,i)=>{
        const d=document.createElement('div'); d.className='clue'; d.textContent=`${entry.number}. ${state.clues.down[i]||''}`; if(currentWordIndex()?.type==='down' && currentWordIndex().idx===i) d.classList.add('active'); downEl.appendChild(d);
      });
    }

    function selectCell(r,c){ if(state.blocks[r][c]) return; state.sel={r,c}; renderAll(); }
    function clamp(v,lo,hi){ return Math.max(lo, Math.min(hi,v)); }
    function move(dr,dc){ const r=clamp(state.sel.r+dr,0,state.rows-
